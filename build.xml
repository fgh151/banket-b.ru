<?xml version="1.0" encoding="UTF-8"?>
<!-- Скрипт Ant, для проверки кода, тестов и т.п.  -->
<project name="SCIENCE-ID" default="build" basedir=".">
    <!-- По умолчанию предполагаем, что все утилиты лежать в системных папках $PATH -->
    <property name="toolsdir" value=""/>

    <!-- Uncomment the following when the tools are in ${basedir}/vendor/bin -->
    <!-- <property name="toolsdir" value="${basedir}/vendor/bin/"/> -->

    <target name="build"
            depends="prepare, composer"
            description=""/>

    <target name="clean"
            unless="clean.done"
            description="Cleanup build artifacts">
        <delete dir="${basedir}/build/logs"/>
        <property name="clean.done" value="true"/>
    </target>

    <target name="prepare"
            unless="prepare.done"
            depends="clean"
            description="Prepare for build">
        <mkdir dir="${basedir}/build/logs"/>
        <property name="prepare.done" value="true"/>
    </target>

    <target name="lint" description="Perform syntax check of sourcecode files">
        <apply executable="php" failonerror="true">
            <arg value="-l"/>

            <fileset dir="${basedir}/common">
                <include name="**/*.php"/>
                <modified/>
            </fileset>

            <fileset dir="${basedir}/cabnet">
                <include name="**/*.php"/>
                <modified/>
            </fileset>

            <fileset dir="${basedir}/admin">
                <include name="**/*.php"/>
                <modified/>
            </fileset>
            <fileset dir="${basedir}/api">
                <include name="**/*.php"/>
                <modified/>
            </fileset>
        </apply>
    </target>

    <target name="phploc-ci"
            depends="prepare"
            description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${toolsdir}phploc">
            <arg value="--log-csv"/>
            <arg path="${basedir}/build/logs/phploc.csv"/>
            <arg value="--log-xml"/>
            <arg path="${basedir}/build/logs/phploc.xml"/>
            <arg path="${basedir}/common"/>
            <arg path="${basedir}/frontend"/>
            <arg path="${basedir}/admin"/>
            <arg path="${basedir}/console"/>
        </exec>
    </target>

    <target name="phpcs-ci"
            depends="prepare"
            description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${toolsdir}phpcs" output="/dev/null">
            <arg value="--report=checkstyle"/>
            <arg value="--report-file=${basedir}/build/logs/checkstyle.xml"/>
            <arg value="--standard=PSR2"/>
            <arg value="--extensions=php"/>
            <arg value="--ignore=autoload.php,*/views/*,*/mail/*,*/migrations/*"/>
            <arg path="${basedir}/common"/>
            <arg path="${basedir}/frontend"/>
            <arg path="${basedir}/admin"/>
            <arg path="${basedir}/console"/>
            <arg path="${basedir}/api"/>
        </exec>
    </target>

    <target name="composer" depends="clean-composer,composer-install,composer-update"
            description="Install or update dependencies"/>

    <!--// Check to see it the vendor folder already exist, if so, then no reason to run //-->
    <target name="composer.check">
        <condition property="composer.lock.exist.in.gitignore">
            <resourcecontains resource="${basedir}/.gitignore" substring="composer.lock"/>
        </condition>
    </target>

    <target name="clean-composer" depends="composer.check" if="composer.lock.exist.in.gitignore"
            description="Cleanup composer artifacts">
        <delete file="${basedir}/composer.lock"/>
    </target>

    <target name="composer-install" depends="composer.check" unless="composer.lock.exist.in.gitignore"
            description="Installing dependencies">
        <echo>Installing dependencies</echo>
        <exec executable="composer" failonerror="true">
            <arg value="install"/>
        </exec>
    </target>

    <target name="composer-update" depends="composer.check" if="composer.lock.exist.in.gitignore"
            description="Updating dependencies">
        <echo>Updating dependencies</echo>
        <exec executable="composer" failonerror="true">
            <arg value="update"/>
        </exec>
    </target>

</project>